---
title: "Exploratory Data Analysis"
author: "Jun Clemente"
format: html
editor: source
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(here)
library(readr)
```

# Switzerland RAW Dataset - EDA

-   Columns with \>50% missing data will be flagged as unuseable unless data can be imputed

## Analyze and Import dataset

The `switzerland.data` file contains the raw dataset, comprising **123 patient records** with **76 attributes**, including the target variable. The data is stored in an unconventional format: although it's a plain text file with space-separated values, **each patient record spans 10 rows**, and there are no header names provided. The end of each record is indicated by the final field labeled `"name"`.

To import and restructure the dataset into a standard tabular format (one row per patient, with properly named columns), **Generative AI assistance** was used to develop R code that:

-   Combines every 10 lines into a single record,

-   Extracts numerical values and the patient name,

-   Assigns appropriate column names, and

-   Handles placeholder values (e.g., `-9`) by converting them to `NA`.

```{r load_data}
col_names_filtered <- c(
  "id",       # patient identification number
  "ccf",      # social security number (dummy value)
  "age",      # age in years
  "sex",      # sex (1 = male; 0 = female)
  "painloc",  # chest pain location (1 = substernal; 0 = otherwise)
  "painexer", # provoked by exertion (1 = yes; 0 = no)
  "relrest",  # relieved after rest (1 = yes; 0 = no)
  "pncaden",  # sum of painexer, relrest, etc.
  "cp",       # chest pain type (1–4)
  "trestbps", # resting blood pressure (mm Hg)
  "htn",      # hypertension (1 = yes; 0 = no)
  "chol",     # serum cholesterol (mg/dl)
  "smoke",    # smoker (1 = yes; 0 = no)
  "cigs",     # cigarettes per day
  "years",    # years as a smoker
  "fbs",      # fasting blood sugar > 120 mg/dl (1 = true; 0 = false)
  "dm",       # history of diabetes (1 = yes; 0 = no)
  "famhist",  # family history of coronary artery disease (1 = yes; 0 = no)
  "restecg",  # resting ECG results (0–2)
  "ekgmo",    # month of exercise ECG
  "ekgday",   # day of exercise ECG
  "ekgyr",    # year of exercise ECG
  "dig",      # digitalis during exercise ECG (1 = yes; 0 = no)
  "prop",     # beta blocker during exercise ECG (1 = yes; 0 = no)
  "nitr",     # nitrates during exercise ECG (1 = yes; 0 = no)
  "pro",      # calcium channel blocker during exercise ECG (1 = yes; 0 = no)
  "diuretic", # diuretic during exercise ECG (1 = yes; 0 = no)
  "proto",    # exercise protocol (1 = Bruce, 2 = Kottus, …, 12 = arm ergometer)
  "thaldur",  # duration of exercise (minutes)
  "thaltime", # time when ST depression noted
  "met",      # METs achieved
  "thalach",  # maximum heart rate achieved
  "thalrest", # resting heart rate
  "tpeakbps", # peak exercise blood pressure (part 1)
  "tpeakbpd", # peak exercise blood pressure (part 2)
  "dummy",    # dummy variable (unused)
  "trestbpd", # resting blood pressure (duplicate measurement)
  "exang",    # exercise-induced angina (1 = yes; 0 = no)
  "xhypo",    # (1 = yes; 0 = no)
  "oldpeak",  # ST depression induced by exercise
  "slope",    # slope of peak exercise ST segment (1–3)
  "rldv5",    # height at rest
  "rldv5e",   # height at peak exercise
  "ca",       # number of major vessels (0–3) colored by fluoroscopy
  "restckm",  # resting cardiokinetic measurement (irrelevant)
  "exerckm",  # exercise cardiokinetic measurement (irrelevant)
  "restef",   # resting radionuclide ejection fraction
  "restwm",   # rest wall motion abnormality (0–3)
  "exeref",   # exercise radionuclide ejection fraction
  "exerwm",   # exercise wall motion
  "thal",     # thallium test (3 = normal; 6 = fixed defect; 7 = reversible defect)
  "thalsev",  # (not used)
  "thalpul",  # (not used)
  "earlobe",  # (not used)
  "cmo",      # month of cardiac catheterization
  "cday",     # day of cardiac catheterization
  "cyr",      # year of cardiac catheterization
  "num",      # diagnosis of heart disease (0 = < 50% narrowing; 1 = > 50% narrowing)
  "lmt",      # left main trunk vessel status
  "ladprox",  # proximal LAD vessel status
  "laddist",  # distal LAD vessel status
  "diag",     # diagonal vessel status
  "cxmain",   # circumflex main vessel status
  "ramus",    # ramus vessel status
  "om1",      # obtuse marginal 1 vessel status
  "om2",      # obtuse marginal 2 vessel status
  "rcaprox",  # right coronary artery proximal status
  "rcadist",  # right coronary artery distal status
  "lvx1",     # (not used)
  "lvx2",     # (not used)
  "lvx3",     # (not used)
  "lvx4",     # (not used)
  "lvf",      # (not used)
  "cathef",   # (not used)
  "junk",     # junk (not used)
  "name"      # last name of patient
)

# Generative AI used to write code to read in .data file
# Step 1: Read the file
lines <- readLines(here("Data", "Raw/switzerland.data"))

# Step 2: Combine every 10 lines per patient
patient_blocks <- split(lines, ceiling(seq_along(lines) / 10))

# Step 3: Parse each block into numeric + name
records <- map(patient_blocks, function(block) {
  tokens <- str_split(paste(block, collapse = " "), "\\s+")[[1]]
  name_value <- tail(tokens, 1)                      # last value is the name
  numeric_values <- as.numeric(tokens[-length(tokens)])
  c(numeric_values, name_value)                     # combine numeric + name
})

# Step 4: Combine into data frame
data <- do.call(rbind, records) %>% 
  as.data.frame(stringsAsFactors = FALSE)

# Step 5: Assign column names
colnames(data) <- col_names_filtered

# Step 6: Replace -9 with NA
data <- data %>%
  mutate(across(where(is.character), ~ na_if(.x, "-9"))) %>%   # character columns
  mutate(across(where(is.numeric), ~ na_if(.x, -9)))           # numeric columns

head(data)
```

### Verify dimensions

```{r}
dim(data)
```

Per the *heart-disease.names* file, the Switzerland dataset contains 123 instances and 76 attributes. This confirms that the dataset read from the *.data* file was imported correctly.

### Export data to RDS file

```{r save_data}
# save data as RDS file
data %>%
  write_rds(here("Data", "EDA", "switzerland_eda.rds"))
# read in data
df <- read_rds(here("Data", "EDA", "switzerland_eda.rds"))
head(df)
```

# Exploratory Data Analysis

```{r}

print("Summary:")
df %>% summary()

print("Column names:")
df %>% names()
```

## Check for missing values

```{r}
# df %>%
#   summarise(across(everything(), ~ sum(is.na(.)))) %>%
#   pivot_longer(everything(), names_to = "column", values_to = "n_missing") %>%
#   arrange(desc(n_missing))

# calculate percentage missing
missing_pct <- df %>%
  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
  pivot_longer(everything(), names_to = "column", values_to = "missing_percent") %>%
  arrange(desc(missing_percent))

# filter by col missing > 50%
missing_pct %>%
  filter(missing_percent > 50)

```

There are 19 attributes that are missing \> 50% of the data.

### Variables with 100% missingness

| Column    | Description                                         |
|-----------|-----------------------------------------------------|
| `pncaden` | Sum of painexer, relrest, etc.                      |
| `restckm` | Resting cardiokinetic measurement (**irrelevant**)  |
| `exerckm` | Exercise cardiokinetic measurement (**irrelevant**) |
| `restef`  | Resting radionuclide ejection fraction              |
| `restwm`  | Rest wall motion abnormality (0–3)                  |
| `exeref`  | Exercise radionuclide ejection fraction             |
| `exerwm`  | Exercise wall motion                                |
| `earlobe` | (**Not used**)                                      |
| `junk`    | (**Junk — not used**)                               |

### Variables with high missingness (\>90%)

| Column | Missing % | Description |
|------------------------|------------------------|------------------------|
| `years` | 98.37% | Years as a smoker |
| `famhist` | 98.37% | Family history of coronary artery disease (1 = yes; 0 = no) |
| `ca` | 95.93% | Number of major vessels (0–3) colored by fluoroscopy |
| `dm` | 93.50% | History of diabetes (1 = yes; 0 = no) |
| `cigs` | 91.06% | Cigarettes per day |

### Variables with moderate missingness (60-81%)

| Column    | Missing % | Description                                            |
|--------------|--------------|---------------------------------------------|
| `smoke`   | 81.30%    | Smoker (1 = yes; 0 = no)                               |
| `thalpul` | 78.86%    | (**Not used**)                                         |
| `rldv5`   | 62.60%    | Height at rest                                         |
| `rldv5e`  | 62.60%    | Height at peak exercise                                |
| `fbs`     | 60.98%    | Fasting blood sugar \> 120 mg/dl (1 = true; 0 = false) |

```{r}
# drop col with >50% missing
df <- df %>%
  select(-all_of(c(
    "pncaden", "restckm", "exerckm", "restef", "restwm", "exeref", "exerwm", "earlobe", "junk",
    "years", "famhist", "ca", "dm", "cigs", "smoke", "thalpul", "rldv5", "rldv5e", "fbs"
  )))

```

```{r}
# check missing values left
df %>%
  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
  pivot_longer(everything(), names_to = "column", values_to = "missing_percent") %>%
  filter(missing_percent > 0) %>%
  arrange(desc(missing_percent))
```

## Compare attributes to ML attributes

### Identify columns not in ML

```{r}
# list of attributes used in ML
ml_vars <- c(
  "age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach",
  "exang", "oldpeak", "slope", "ca", "thal", "num"
)

# identify columns not in ml_vars
extra_vars <- setdiff(names(df), ml_vars)
extra_vars
length(extra_vars)
```

There are a total of 45 extra attributes that were not used in the ML dataset.

### Identify columns missing

```{r}
# missing in df
missing_df <- setdiff(ml_vars, names(df))
missing_df
```

The variables *fbs* and *ca* were dropped because it have \>50% missingness. These were in the original ML dataset.

These variables: id, ccf, name, and dummy, are identifiers and would not be useful in modeling.

The following charts show the variables left alongside their description. ChatGPT included a column for "Usefulness"

#### Symptom or ECG-related

The following variables are labeled with their description.

| Variable | Description | Usefulness |
|------------------------|------------------------|------------------------|
| `painloc` | Chest pain location (1 = substernal) | ⚠️ Rarely used in modeling |
| `painexer` | Pain provoked by exertion | ⚠️ Could support chest pain analysis |
| `relrest` | Pain relieved by rest | ⚠️ Related to angina symptoms |
| `htn` | Hypertension | ✅ Clinically relevant — consider keeping |
| `dig` | Digitalis used during ECG | ✅ Medication use — may indicate severity |
| `prop` | Beta blockers used during ECG | ✅ Similar reason as above |
| `nitr` | Nitrates used during ECG | ✅ Indicates angina |
| `pro` | Calcium channel blocker during ECG | ⚠️ Rarely studied, possible proxy |
| `diuretic` | Diuretic use during ECG | ⚠️ Associated with hypertension/CHF |
| `xhypo` | Exercise-induced hypotension | ⚠️ Potentially useful for ischemia |

#### Test/Procedure Timing & Protocol

| Variable | Description | Usefulness |
|------------------------|------------------------|------------------------|
| `ekgmo`, `ekgday`, `ekgyr` | Date of exercise ECG | ❌ Drop unless doing time-based analysis |
| `proto` | Protocol used during exercise test (1 = Bruce, etc.) | ⚠️ Some labs use this |
| `thaldur`, `thaltime`, `met` | Exercise performance measures (duration, METs) | ✅ Important in functional capacity evaluation |
| `thalrest` | Resting heart rate | ✅ Could affect stress test outcomes |
| `tpeakbps`, `tpeakbpd`, `trestbpd` | Blood pressure values | ✅ Potentially informative for cardiac load |


## Create subset of most useful variables

```{r}
# Create enhanced feature set: baseline + additional informative variables
enhanced_vars <- c(
  # Baseline ML variables still in your dataset
  "age", "sex", "cp", "trestbps", "chol", "restecg", "thalach",
  "exang", "oldpeak", "slope", "thal", "num",
  
  # Additional clinical + exercise test variables
  "htn", "dig", "nitr", "diuretic", "prop",
  "thaldur", "thaltime", "met", "thalrest",
  "tpeakbps", "tpeakbpd", "trestbpd", "proto", "xhypo"
)

# Subset the df to keep only these columns
df_enhanced <- df %>%
  select(all_of(enhanced_vars))

df_enhanced %>% head()

df_enhanced %>%
  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
  pivot_longer(everything(), names_to = "column", values_to = "missing_percent") %>%
  filter(missing_percent > 0) %>%
  arrange(desc(missing_percent))
```
```{r}
df_enhanced %>%
  summarise(across(everything(), ~ n_distinct(.))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "n_unique") %>%
  filter(n_unique == 1)

```
```{r}
df_enhanced <- df_enhanced %>%
  select(-chol)

```


```{r}
# Define a mode function
get_mode <- function(x) {
  ux <- na.omit(unique(x))
  ux[which.max(tabulate(match(x, ux)))]
}

# Impute all variables accordingly
df_enhanced_clean <- df_enhanced %>%
  mutate(
    thal      = ifelse(is.na(thal), get_mode(thal), thal),
    proto     = ifelse(is.na(proto), get_mode(proto), proto),
    htn       = ifelse(is.na(htn), get_mode(htn), htn),
    slope     = ifelse(is.na(slope), get_mode(slope), slope),
    diuretic  = ifelse(is.na(diuretic), get_mode(diuretic), diuretic),
    dig       = ifelse(is.na(dig), get_mode(dig), dig),
    nitr      = ifelse(is.na(nitr), get_mode(nitr), nitr),
    xhypo     = ifelse(is.na(xhypo), get_mode(xhypo), xhypo),
    prop      = ifelse(is.na(prop), get_mode(prop), prop),
    exang     = ifelse(is.na(exang), get_mode(exang), exang),
    restecg   = ifelse(is.na(restecg), get_mode(restecg), restecg),

    met       = ifelse(is.na(met), median(as.numeric(met), na.rm = TRUE), met),
    thaltime  = ifelse(is.na(thaltime), median(as.numeric(thaltime), na.rm = TRUE), thaltime),
    oldpeak   = ifelse(is.na(oldpeak), median(as.numeric(oldpeak), na.rm = TRUE), oldpeak),
    tpeakbps  = ifelse(is.na(tpeakbps), median(as.numeric(tpeakbps), na.rm = TRUE), tpeakbps),
    tpeakbpd  = ifelse(is.na(tpeakbpd), median(as.numeric(tpeakbpd), na.rm = TRUE), tpeakbpd),
    trestbps  = ifelse(is.na(trestbps), median(as.numeric(trestbps), na.rm = TRUE), trestbps),
    trestbpd  = ifelse(is.na(trestbpd), median(as.numeric(trestbpd), na.rm = TRUE), trestbpd),
    thaldur   = ifelse(is.na(thaldur), median(as.numeric(thaldur), na.rm = TRUE), thaldur),
    thalach   = ifelse(is.na(thalach), median(as.numeric(thalach), na.rm = TRUE), thalach),
    thalrest  = ifelse(is.na(thalrest), median(as.numeric(thalrest), na.rm = TRUE), thalrest)
  )


```

```{r}
df_enhanced_clean %>%
  summarise(across(everything(), ~ n_distinct(.))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "n_unique") %>%
  filter(n_unique == 1)
```
```{r}
df_enhanced_clean<- df_enhanced_clean %>%
  select(-proto)

```


```{r}
summary(df_enhanced_clean)

df_enhanced_clean %>%
  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
  pivot_longer(everything(), names_to = "column", values_to = "missing_percent") %>%
  filter(missing_percent > 0) %>%
  arrange(desc(missing_percent))
```

# Post-Cleaning Analysis

```{r}
df_enhanced_clean %>%
  summarise(across(everything(), ~ n_distinct(.))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "n_unique") %>%
  filter(n_unique == 1)

```

## Correlation Analysis
```{r}
# Convert relevant columns to numeric
df_num <- df_enhanced_clean %>%
  mutate(across(everything(), as.numeric))

# Compute correlation matrix
cor_matrix <- cor(df_num, use = "complete.obs")

# Plot with corrplot
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", 
         tl.cex = 0.6, tl.col = "black", diag = FALSE)

```
```{r}
df_enhanced_clean
```
```{r}
colnames(df_enhanced_clean)
ncol(df_enhanced_clean)
```

After cleaning and removing low var columns after imputation, there are a total of 24 attributes that could be used for modeling. 

